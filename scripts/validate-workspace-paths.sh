#!/bin/bash

# FarmTally Jenkins Pipeline Workspace Path Validation Script
# This script validates that all required directories and files exist before build execution

set -e

echo "🔍 Validating FarmTally workspace structure..."

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to check if path exists
check_path() {
    local path=$1
    local description=$2
    local required=${3:-true}
    
    if [ -e "$path" ]; then
        echo -e "${GREEN}✅ Found: $description at $path${NC}"
        return 0
    else
        if [ "$required" = "true" ]; then
            echo -e "${RED}❌ Missing: $description at $path${NC}"
            return 1
        else
            echo -e "${YELLOW}⚠️  Optional: $description not found at $path${NC}"
            return 0
        fi
    fi
}

# Function to check directory structure
check_directory_structure() {
    echo "📁 Checking directory structure..."
    
    # Backend structure (repository root)
    check_path "package.json" "Backend package.json (repository root)"
    check_path "src" "Backend source directory"
    check_path "src/server.ts" "Backend main server file"
    check_path "tsconfig.json" "TypeScript configuration"
    check_path "prisma" "Prisma database directory"
    check_path "prisma/schema.prisma" "Prisma schema file"
    
    # Frontend structure
    check_path "farmtally-frontend" "Frontend directory"
    check_path "farmtally-frontend/package.json" "Frontend package.json"
    check_path "farmtally-frontend/src" "Frontend source directory"
    check_path "farmtally-frontend/next.config.ts" "Next.js configuration"
    
    # Build output directories (may not exist initially)
    check_path "dist" "Backend build output directory" false
    check_path "farmtally-frontend/.next" "Frontend build output directory" false
    check_path "farmtally-frontend/out" "Frontend static export directory" false
}

# Function to validate package.json scripts
validate_build_scripts() {
    echo "🔧 Validating build scripts..."
    
    # Check backend scripts
    if ! grep -q '"build"' package.json; then
        echo -e "${RED}❌ Backend package.json missing 'build' script${NC}"
        return 1
    fi
    
    if ! grep -q '"start"' package.json; then
        echo -e "${RED}❌ Backend package.json missing 'start' script${NC}"
        return 1
    fi
    
    # Check frontend scripts
    if ! grep -q '"build"' farmtally-frontend/package.json; then
        echo -e "${RED}❌ Frontend package.json missing 'build' script${NC}"
        return 1
    fi
    
    echo -e "${GREEN}✅ All required build scripts found${NC}"
}

# Function to check for common path issues
check_common_issues() {
    echo "🔍 Checking for common path issues..."
    
    # Check for old directory references that might be in existing Jenkinsfiles
    if [ -d "backend" ]; then
        echo -e "${YELLOW}⚠️  Found 'backend' directory - this should not exist in current structure${NC}"
        echo -e "${YELLOW}    Backend files should be in repository root${NC}"
    fi
    
    if [ -d "frontend" ]; then
        echo -e "${YELLOW}⚠️  Found 'frontend' directory - should be 'farmtally-frontend'${NC}"
    fi
    
    # Check for multiple frontend directories
    frontend_dirs=$(find . -maxdepth 1 -name "*frontend*" -type d | wc -l)
    if [ "$frontend_dirs" -gt 1 ]; then
        echo -e "${YELLOW}⚠️  Multiple frontend directories found:${NC}"
        find . -maxdepth 1 -name "*frontend*" -type d
        echo -e "${YELLOW}    Ensure only 'farmtally-frontend' is used in pipeline${NC}"
    fi
}

# Function to generate path configuration
generate_path_config() {
    echo "📝 Generating path configuration..."
    
    cat > workspace-paths.env << EOF
# FarmTally Workspace Path Configuration
# Generated by validate-workspace-paths.sh

# Backend paths (repository root)
BACKEND_ROOT=.
BACKEND_SRC=src
BACKEND_DIST=dist
BACKEND_PACKAGE_JSON=package.json

# Frontend paths
FRONTEND_ROOT=farmtally-frontend
FRONTEND_SRC=farmtally-frontend/src
FRONTEND_DIST=farmtally-frontend/.next
FRONTEND_STATIC=farmtally-frontend/out
FRONTEND_PACKAGE_JSON=farmtally-frontend/package.json

# Database paths
PRISMA_ROOT=prisma
PRISMA_SCHEMA=prisma/schema.prisma

# Build artifact paths
BACKEND_ARTIFACTS=dist/*
FRONTEND_ARTIFACTS=farmtally-frontend/.next/*,farmtally-frontend/out/*

# Validation timestamp
VALIDATION_TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)
EOF
    
    echo -e "${GREEN}✅ Path configuration saved to workspace-paths.env${NC}"
}

# Main validation function
main() {
    echo "🚀 Starting FarmTally workspace validation..."
    echo "================================================"
    
    local validation_failed=false
    
    # Run all validation checks
    if ! check_directory_structure; then
        validation_failed=true
    fi
    
    if ! validate_build_scripts; then
        validation_failed=true
    fi
    
    check_common_issues
    
    # Generate configuration if validation passed
    if [ "$validation_failed" = "false" ]; then
        generate_path_config
        echo "================================================"
        echo -e "${GREEN}🎉 Workspace validation completed successfully!${NC}"
        echo -e "${GREEN}✅ All required paths and files are present${NC}"
        echo -e "${GREEN}✅ Build scripts are properly configured${NC}"
        echo -e "${GREEN}✅ Path configuration generated${NC}"
        return 0
    else
        echo "================================================"
        echo -e "${RED}❌ Workspace validation failed!${NC}"
        echo -e "${RED}Please fix the issues above before running the pipeline${NC}"
        return 1
    fi
}

# Run validation if script is executed directly
if [ "${BASH_SOURCE[0]}" == "${0}" ]; then
    main "$@"
fi