pipeline {
    agent any
    
    environment {
        // Isolated microservices deployment configuration
        PROJECT_NAME = 'farmtally-isolated'
        
        // Isolated port configuration (to avoid conflicts)
        POSTGRES_PORT = '5433'
        AUTH_SERVICE_PORT = '8081'
        API_GATEWAY_PORT = '8090'
        FIELD_MANAGER_PORT = '8088'
        FARM_ADMIN_PORT = '8089'
        FRONTEND_PORT = '3001'
        NGINX_PORT = '8080'
        
        // VPS Configuration
        VPS_HOST = '147.93.153.247'
        VPS_USER = 'root'
        DEPLOY_DIR = '/opt/farmtally-isolated'
        
        // Network configuration
        FARMTALLY_NETWORK = 'farmtally-isolated-network'
        
        // Application Configuration
        NODE_ENV = 'production'
        DOCKER_BUILDKIT = '1'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo '📥 Checking out FarmTally source code...'
                checkout scm
                
                script {
                    // Verify microservices structure
                    if (!fileExists('services/auth-service/server.js')) {
                        error('❌ Auth service not found')
                    }
                    if (!fileExists('services/api-gateway/server.js')) {
                        error('❌ API Gateway not found')
                    }
                    if (!fileExists('services/field-manager-service/server.js')) {
                        error('❌ Field Manager service not found')
                    }
                    if (!fileExists('services/farm-admin-service/server.js')) {
                        error('❌ Farm Admin service not found')
                    }
                    if (!fileExists('farmtally-frontend/package.json')) {
                        error('❌ Frontend not found')
                    }
                    echo '✅ All microservices verified'
                }
            }
        }
        
        stage('Verify Dependencies') {
            parallel {
                stage('Docker') {
                    steps {
                        echo '🐳 Verifying Docker availability...'
                        script {
                            try {
                                sh 'docker --version'
                                sh 'docker-compose --version'
                                echo '✅ Docker is available'
                            } catch (Exception e) {
                                error '❌ Docker is not available in Jenkins'
                            }
                        }
                    }
                }
                
                stage('Node.js') {
                    steps {
                        echo '📦 Verifying Node.js for frontend build...'
                        script {
                            try {
                                sh 'node --version'
                                sh 'npm --version'
                                echo '✅ Node.js is available'
                            } catch (Exception e) {
                                error '❌ Node.js is not available'
                            }
                        }
                    }
                }
            }
        }
        
        stage('Build Frontend') {
            steps {
                echo '🎨 Building FarmTally Frontend...'
                script {
                    try {
                        sh '''
                            cd farmtally-frontend
                            
                            # Create isolated environment
                            cat > .env.production << EOF
NEXT_PUBLIC_API_URL=http://147.93.153.247:${API_GATEWAY_PORT}
NEXT_PUBLIC_AUTH_URL=http://147.93.153.247:${AUTH_SERVICE_PORT}
NEXT_PUBLIC_FIELD_MANAGER_URL=http://147.93.153.247:${FIELD_MANAGER_PORT}
NEXT_PUBLIC_FARM_ADMIN_URL=http://147.93.153.247:${FARM_ADMIN_PORT}
NEXT_PUBLIC_SOCKET_URL=http://147.93.153.247:${API_GATEWAY_PORT}
EOF
                            
                            echo "📦 Installing frontend dependencies..."
                            npm ci
                            
                            echo "🏗️ Building production frontend..."
                            npm run build
                            
                            echo "📤 Creating static export..."
                            npx next export || echo "Export completed"
                            
                            echo "✅ Verifying build output..."
                            ls -la out/
                            
                            # Clean up
                            rm -f .env.production
                        '''
                        echo '✅ Frontend built successfully'
                    } catch (Exception e) {
                        error "❌ Frontend build failed: ${e.getMessage()}"
                    }
                }
            }
        }
        
        stage('Create Isolated Docker Compose') {
            steps {
                echo '🐳 Creating isolated microservices Docker Compose...'
                script {
                    // Create isolated Docker Compose with all microservices
                    writeFile file: 'docker-compose.isolated-microservices.yml', text: """
version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15
    container_name: farmtally-postgres-isolated
    environment:
      POSTGRES_DB: farmtally
      POSTGRES_USER: farmtally_user
      POSTGRES_PASSWORD: farmtally_secure_password_2024
    volumes:
      - postgres_data_isolated:/var/lib/postgresql/data
      - ./create-database-schema.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - ${FARMTALLY_NETWORK}
    restart: unless-stopped

  # Auth Service
  auth-service:
    build:
      context: .
      dockerfile: services/auth-service/Dockerfile
    container_name: farmtally-auth-isolated
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://farmtally_user:farmtally_secure_password_2024@postgres:5432/farmtally
      - JWT_SECRET=farmtally_jwt_secret_key_2024_secure
      - PORT=${AUTH_SERVICE_PORT}
    ports:
      - "${AUTH_SERVICE_PORT}:${AUTH_SERVICE_PORT}"
    depends_on:
      - postgres
    networks:
      - ${FARMTALLY_NETWORK}
    restart: unless-stopped

  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: services/api-gateway/Dockerfile
    container_name: farmtally-gateway-isolated
    environment:
      - NODE_ENV=production
      - PORT=${API_GATEWAY_PORT}
      - AUTH_SERVICE_URL=http://auth-service:${AUTH_SERVICE_PORT}
      - FIELD_MANAGER_SERVICE_URL=http://field-manager-service:${FIELD_MANAGER_PORT}
      - FARM_ADMIN_SERVICE_URL=http://farm-admin-service:${FARM_ADMIN_PORT}
    ports:
      - "${API_GATEWAY_PORT}:${API_GATEWAY_PORT}"
    depends_on:
      - auth-service
      - field-manager-service
      - farm-admin-service
    networks:
      - ${FARMTALLY_NETWORK}
    restart: unless-stopped

  # Field Manager Service
  field-manager-service:
    build:
      context: .
      dockerfile: services/field-manager-service/Dockerfile
    container_name: farmtally-field-manager-isolated
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://farmtally_user:farmtally_secure_password_2024@postgres:5432/farmtally
      - PORT=${FIELD_MANAGER_PORT}
    ports:
      - "${FIELD_MANAGER_PORT}:${FIELD_MANAGER_PORT}"
    depends_on:
      - postgres
    networks:
      - ${FARMTALLY_NETWORK}
    restart: unless-stopped

  # Farm Admin Service
  farm-admin-service:
    build:
      context: .
      dockerfile: services/farm-admin-service/Dockerfile
    container_name: farmtally-farm-admin-isolated
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://farmtally_user:farmtally_secure_password_2024@postgres:5432/farmtally
      - PORT=${FARM_ADMIN_PORT}
    ports:
      - "${FARM_ADMIN_PORT}:${FARM_ADMIN_PORT}"
    depends_on:
      - postgres
    networks:
      - ${FARMTALLY_NETWORK}
    restart: unless-stopped

  # Frontend (Static files served by Nginx)
  nginx:
    image: nginx:alpine
    container_name: farmtally-nginx-isolated
    volumes:
      - ./farmtally-frontend/out:/usr/share/nginx/html/farmtally:ro
      - ./nginx-isolated.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "${NGINX_PORT}:80"
    depends_on:
      - api-gateway
    networks:
      - ${FARMTALLY_NETWORK}
    restart: unless-stopped

volumes:
  postgres_data_isolated:

networks:
  ${FARMTALLY_NETWORK}:
    driver: bridge
    name: ${FARMTALLY_NETWORK}
"""
                    
                    // Create Nginx configuration for isolated deployment
                    writeFile file: 'nginx-isolated.conf', text: """
events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    
    # Logging
    log_format main '\$remote_addr - \$remote_user [\$time_local] "\$request" '
                    '\$status \$body_bytes_sent "\$http_referer" '
                    '"\$http_user_agent" "\$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;
    
    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml+rss text/javascript;
    
    server {
        listen 80;
        server_name localhost;
        
        # Frontend static files
        location /farmtally/ {
            alias /usr/share/nginx/html/farmtally/;
            try_files \$uri \$uri/ /farmtally/index.html;
        }
        
        # API Gateway proxy
        location /farmtally/api/ {
            proxy_pass http://api-gateway:${API_GATEWAY_PORT}/;
            proxy_set_header Host \$host;
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto \$scheme;
            
            # CORS headers
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "Content-Type, Authorization";
        }
        
        # Auth Service proxy
        location /farmtally/auth/ {
            proxy_pass http://auth-service:${AUTH_SERVICE_PORT}/;
            proxy_set_header Host \$host;
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto \$scheme;
            
            # CORS headers
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "Content-Type, Authorization";
        }
        
        # Direct service access for testing
        location /direct/auth/ {
            proxy_pass http://auth-service:${AUTH_SERVICE_PORT}/;
            proxy_set_header Host \$host;
            proxy_set_header X-Real-IP \$remote_addr;
        }
        
        location /direct/field-manager/ {
            proxy_pass http://field-manager-service:${FIELD_MANAGER_PORT}/;
            proxy_set_header Host \$host;
            proxy_set_header X-Real-IP \$remote_addr;
        }
        
        location /direct/farm-admin/ {
            proxy_pass http://farm-admin-service:${FARM_ADMIN_PORT}/;
            proxy_set_header Host \$host;
            proxy_set_header X-Real-IP \$remote_addr;
        }
        
        location /direct/api-gateway/ {
            proxy_pass http://api-gateway:${API_GATEWAY_PORT}/;
            proxy_set_header Host \$host;
            proxy_set_header X-Real-IP \$remote_addr;
        }
    }
}
"""
                    
                    echo '✅ Isolated microservices Docker Compose created'
                }
            }
        }
        
        stage('Deploy to VPS') {
            steps {
                echo '🚀 Deploying isolated microservices to VPS...'
                script {
                    try {
                        sh '''
                            # Create deployment package
                            tar -czf farmtally-isolated-deployment.tar.gz \\
                                docker-compose.isolated-microservices.yml \\
                                nginx-isolated.conf \\
                                farmtally-frontend/out \\
                                services/ \\
                                create-database-schema.sql \\
                                package.json \\
                                package-lock.json
                            
                            # Copy to VPS
                            scp -o StrictHostKeyChecking=no farmtally-isolated-deployment.tar.gz ${VPS_USER}@${VPS_HOST}:/tmp/
                            
                            # Deploy on VPS
                            ssh -o StrictHostKeyChecking=no ${VPS_USER}@${VPS_HOST} "
                                set -e
                                
                                # Create deployment directory
                                mkdir -p ${DEPLOY_DIR}
                                cd ${DEPLOY_DIR}
                                
                                # Stop existing deployment
                                docker-compose -f docker-compose.isolated-microservices.yml down 2>/dev/null || true
                                
                                # Extract new deployment
                                tar -xzf /tmp/farmtally-isolated-deployment.tar.gz
                                rm /tmp/farmtally-isolated-deployment.tar.gz
                                
                                # Deploy microservices
                                docker-compose -f docker-compose.isolated-microservices.yml up -d --build
                                
                                echo '✅ Isolated microservices deployment completed!'
                            "
                        '''
                        echo '✅ Deployment completed successfully'
                    } catch (Exception e) {
                        error "❌ Deployment failed: ${e.getMessage()}"
                    }
                }
            }
        }
        
        stage('Health Check') {
            steps {
                echo '🏥 Performing health checks on all microservices...'
                script {
                    sleep(60) // Wait for services to start
                    
                    def services = [
                        [name: 'Auth Service', port: AUTH_SERVICE_PORT, path: '/health'],
                        [name: 'API Gateway', port: API_GATEWAY_PORT, path: '/'],
                        [name: 'Field Manager', port: FIELD_MANAGER_PORT, path: '/health'],
                        [name: 'Farm Admin', port: FARM_ADMIN_PORT, path: '/health'],
                        [name: 'Frontend (Nginx)', port: NGINX_PORT, path: '/farmtally/']
                    ]
                    
                    def healthyServices = 0
                    
                    services.each { service ->
                        try {
                            sh """
                                ssh -o StrictHostKeyChecking=no ${VPS_USER}@${VPS_HOST} "
                                    curl -f http://localhost:${service.port}${service.path}
                                "
                            """
                            echo "✅ ${service.name} is healthy"
                            healthyServices++
                        } catch (Exception e) {
                            echo "❌ ${service.name} health check failed"
                        }
                    }
                    
                    echo "📊 Health Summary: ${healthyServices}/${services.size()} services healthy"
                    
                    if (healthyServices < 3) {
                        error "❌ Too many services failed health checks"
                    }
                }
            }
        }
    }
    
    post {
        success {
            echo '''
            🎉 FarmTally Isolated Microservices Deployment Successful!
            ========================================================
            
            ✅ All microservices deployed with isolated ports
            ✅ Complete microservices architecture maintained
            ✅ No conflicts with existing deployments
            
            Access URLs (Isolated Deployment):
            🌐 Frontend: http://147.93.153.247:8080/farmtally/
            🧪 API Test: http://147.93.153.247:8080/farmtally/test-api
            
            Direct Microservice Access:
            🔐 Auth Service: http://147.93.153.247:8081/health
            🚪 API Gateway: http://147.93.153.247:8090/
            👨‍🌾 Field Manager: http://147.93.153.247:8088/health
            🏢 Farm Admin: http://147.93.153.247:8089/health
            🗄️ Database: localhost:5433
            
            Direct Service Testing:
            🔗 Auth Direct: http://147.93.153.247:8080/direct/auth/health
            🔗 Field Manager Direct: http://147.93.153.247:8080/direct/field-manager/health
            🔗 Farm Admin Direct: http://147.93.153.247:8080/direct/farm-admin/health
            🔗 API Gateway Direct: http://147.93.153.247:8080/direct/api-gateway/
            '''
        }
        
        failure {
            echo '''
            ❌ FarmTally Isolated Deployment Failed!
            =======================================
            
            Please check the logs above for error details.
            
            Common issues:
            1. Port conflicts with existing services
            2. Docker build failures for microservices
            3. Database connection issues
            4. Network configuration problems
            '''
            
            // Rollback on failure
            script {
                try {
                    sh """
                        ssh -o StrictHostKeyChecking=no ${VPS_USER}@${VPS_HOST} "
                            cd ${DEPLOY_DIR}
                            docker-compose -f docker-compose.isolated-microservices.yml down
                            echo '🔄 Isolated containers stopped due to deployment failure'
                        " || true
                    """
                } catch (Exception e) {
                    echo "Rollback failed: ${e.getMessage()}"
                }
            }
        }
        
        always {
            echo '🧹 Cleaning up build artifacts...'
            sh '''
                rm -f docker-compose.isolated-microservices.yml
                rm -f nginx-isolated.conf
                rm -f farmtally-isolated-deployment.tar.gz
            '''
        }
    }
}