version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: farmtally-postgres
    environment:
      POSTGRES_DB: farmtally
      POSTGRES_USER: farmtally
      POSTGRES_PASSWORD: farmtally_password_2024
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - farmtally-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U farmtally -d farmtally"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: farmtally-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - farmtally-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FarmTally Backend
  backend:
    build: .
    container_name: farmtally-backend
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://farmtally:farmtally_password_2024@postgres:5432/farmtally
      JWT_SECRET: ${JWT_SECRET:-farmtally-super-secret-jwt-key-2024}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,https://farmtally.com}
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - farmtally-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ./uploads:/app/uploads

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: farmtally-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - backend
    networks:
      - farmtally-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  farmtally-network:
    driver: bridge