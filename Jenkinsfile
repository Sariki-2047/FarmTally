pipeline {
    agent any
    
    tools {
        nodejs 'Node 18'
    }
    
    environment {
        VPS_HOST = '147.93.153.247'
        VPS_USER = 'root'
        APP_DIR = '/opt/farmtally'
        NODE_ENV = 'production'
        
        // Path configuration - these will be validated before build
        BACKEND_ROOT = '.'
        FRONTEND_ROOT = 'farmtally-frontend'
        BACKEND_DIST = 'dist'
        FRONTEND_DIST = 'farmtally-frontend/.next'
        FRONTEND_STATIC = 'farmtally-frontend/out'
        
        // Non-sensitive configuration
        PORT = '3001'
        JWT_EXPIRES_IN = '24h'
        JWT_REFRESH_EXPIRES_IN = '7d'
        BCRYPT_SALT_ROUNDS = '12'
        MAX_FILE_SIZE = '5242880'
        ALLOWED_FILE_TYPES = 'image/jpeg,image/png,image/webp,application/pdf'
        RATE_LIMIT_WINDOW_MS = '900000'
        RATE_LIMIT_MAX = '100'
        SMTP_PORT = '587'
        SMTP_SECURE = 'false'
        SMTP_FROM_NAME = 'FarmTally'
        EMAIL_NOTIFICATIONS_ENABLED = 'true'
        NEXT_PUBLIC_APP_NAME = 'FarmTally'
        NEXT_PUBLIC_APP_VERSION = '1.0.0'
    }
    
    stages {
        stage('Workspace Validation') {
            steps {
                echo 'üîç Validating workspace structure and paths...'
                script {
                    try {
                        // Run workspace validation script
                        if (isUnix()) {
                            sh 'chmod +x scripts/validate-workspace-paths.sh'
                            sh './scripts/validate-workspace-paths.sh'
                        } else {
                            bat 'scripts\\validate-workspace-paths.bat'
                        }
                        
                        // Load generated path configuration
                        if (fileExists('workspace-paths.env')) {
                            echo '‚úÖ Loading validated workspace paths...'
                            def props = readProperties file: 'workspace-paths.env'
                            env.BACKEND_ROOT = props.BACKEND_ROOT
                            env.FRONTEND_ROOT = props.FRONTEND_ROOT
                            env.BACKEND_DIST = props.BACKEND_DIST
                            env.FRONTEND_DIST = props.FRONTEND_DIST
                            env.FRONTEND_STATIC = props.FRONTEND_STATIC
                        } else {
                            error('‚ùå Workspace validation failed - no path configuration generated')
                        }
                    } catch (Exception e) {
                        echo "‚ùå Workspace validation failed: ${e.getMessage()}"
                        sh "node scripts/failure-handler.js workspace_validation '${e.getMessage()}' 'Workspace Validation'"
                        throw e
                    }
                }
            }
        }
        
        stage('Credential Validation') {
            steps {
                echo 'üîê Validating Jenkins credentials...'
                script {
                    try {
                        // Load and execute credential validation script
                        def credentialValidator = load 'scripts/validate-jenkins-credentials.groovy'
                        def validationResults = credentialValidator.validateAllCredentials()
                        credentialValidator.generateValidationReport(validationResults)
                        
                        echo '‚úÖ All required credentials validated successfully'
                    } catch (Exception e) {
                        echo "‚ùå Credential validation failed: ${e.getMessage()}"
                        sh "node scripts/failure-handler.js credential_validation '${e.getMessage()}' 'Credential Validation'"
                        throw e
                    }
                }
            }
        }
        
        stage('Environment Validation') {
            steps {
                echo 'üîç Validating environment variables and service connectivity...'
                withCredentials([
                    string(credentialsId: 'farmtally-database-url', variable: 'DATABASE_URL'),
                    string(credentialsId: 'farmtally-jwt-secret', variable: 'JWT_SECRET'),
                    string(credentialsId: 'farmtally-cors-origins', variable: 'CORS_ORIGINS'),
                    string(credentialsId: 'farmtally-smtp-host', variable: 'SMTP_HOST'),
                    string(credentialsId: 'farmtally-smtp-user', variable: 'SMTP_USER'),
                    string(credentialsId: 'farmtally-smtp-password', variable: 'SMTP_PASS'),
                    string(credentialsId: 'farmtally-frontend-url', variable: 'FRONTEND_URL'),
                    string(credentialsId: 'farmtally-api-url', variable: 'NEXT_PUBLIC_API_URL'),
                    string(credentialsId: 'farmtally-supabase-url', variable: 'NEXT_PUBLIC_SUPABASE_URL'),
                    string(credentialsId: 'farmtally-supabase-anon-key', variable: 'NEXT_PUBLIC_SUPABASE_ANON_KEY')
                ]) {
                    script {
                        try {
                            // Run environment variable validation
                            if (isUnix()) {
                                sh 'chmod +x scripts/validate-environment-variables.sh'
                                sh './scripts/validate-environment-variables.sh'
                            } else {
                                bat 'scripts\\validate-environment-variables.bat'
                            }
                            
                            // Run backend connectivity verification
                            echo 'üîç Verifying backend service connectivity...'
                            sh 'node scripts/verify-backend-connectivity.js'
                            
                            echo '‚úÖ Environment validation and connectivity verification completed'
                        } catch (Exception e) {
                            echo "‚ùå Environment validation failed: ${e.getMessage()}"
                            sh "node scripts/failure-handler.js environment_validation '${e.getMessage()}' 'Environment Validation'"
                            throw e
                        }
                    }
                }
            }
        }
        
        stage('Checkout') {
            steps {
                echo 'üì• Checking out source code...'
                checkout scm
                
                // Verify critical paths exist after checkout
                script {
                    echo 'üîç Verifying critical paths after checkout...'
                    
                    // Check backend paths
                    if (!fileExists('package.json')) {
                        error('‚ùå Backend package.json not found at repository root')
                    }
                    if (!fileExists('src/server.ts')) {
                        error('‚ùå Backend server.ts not found in src/ directory')
                    }
                    
                    // Check frontend paths
                    if (!fileExists('farmtally-frontend/package.json')) {
                        error('‚ùå Frontend package.json not found in farmtally-frontend/ directory')
                    }
                    if (!fileExists('farmtally-frontend/src')) {
                        error('‚ùå Frontend src directory not found in farmtally-frontend/')
                    }
                    
                    echo '‚úÖ All critical paths verified'
                }
            }
        }
        
        stage('Install Dependencies') {
            parallel {
                stage('Backend Dependencies') {
                    steps {
                        echo 'üì¶ Installing backend dependencies...'
                        // Execute from repository root (where backend package.json is located)
                        dir("${env.BACKEND_ROOT}") {
                            script {
                                if (!fileExists('package.json')) {
                                    error('‚ùå package.json not found in backend root directory')
                                }
                                sh 'npm ci --only=production'
                            }
                        }
                    }
                }
                stage('Frontend Dependencies') {
                    steps {
                        echo 'üì¶ Installing frontend dependencies...'
                        // Execute from farmtally-frontend directory
                        dir("${env.FRONTEND_ROOT}") {
                            script {
                                if (!fileExists('package.json')) {
                                    error('‚ùå package.json not found in frontend directory')
                                }
                                sh 'npm ci'
                            }
                        }
                    }
                }
            }
        }
        
        stage('Build') {
            parallel {
                stage('Build Backend') {
                    steps {
                        echo 'üî® Building backend...'
                        script {
                            try {
                                // Execute from repository root with injected credentials
                                dir("${env.BACKEND_ROOT}") {
                                    withCredentials([
                                        string(credentialsId: 'farmtally-database-url', variable: 'DATABASE_URL'),
                                        string(credentialsId: 'farmtally-jwt-secret', variable: 'JWT_SECRET'),
                                        string(credentialsId: 'farmtally-cors-origins', variable: 'CORS_ORIGINS'),
                                        string(credentialsId: 'farmtally-smtp-host', variable: 'SMTP_HOST'),
                                        string(credentialsId: 'farmtally-smtp-user', variable: 'SMTP_USER'),
                                        string(credentialsId: 'farmtally-smtp-password', variable: 'SMTP_PASS'),
                                        string(credentialsId: 'farmtally-frontend-url', variable: 'FRONTEND_URL')
                                    ]) {
                                        // Create temporary .env file for build process
                                        sh '''
                                            echo "Creating temporary .env file for backend build..."
                                            cat > .env.production << EOF
# Environment
NODE_ENV=production
PORT=${PORT}

# Database
DATABASE_URL=${DATABASE_URL}

# JWT
JWT_SECRET=${JWT_SECRET}
JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
JWT_REFRESH_EXPIRES_IN=${JWT_REFRESH_EXPIRES_IN}

# CORS
CORS_ORIGINS=${CORS_ORIGINS}

# Security
BCRYPT_SALT_ROUNDS=${BCRYPT_SALT_ROUNDS}

# File Upload
MAX_FILE_SIZE=${MAX_FILE_SIZE}
ALLOWED_FILE_TYPES=${ALLOWED_FILE_TYPES}

# Rate Limiting
RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS}
RATE_LIMIT_MAX=${RATE_LIMIT_MAX}

# Email Configuration
EMAIL_NOTIFICATIONS_ENABLED=${EMAIL_NOTIFICATIONS_ENABLED}
SMTP_HOST=${SMTP_HOST}
SMTP_PORT=${SMTP_PORT}
SMTP_SECURE=${SMTP_SECURE}
SMTP_USER=${SMTP_USER}
SMTP_PASS=${SMTP_PASS}
SMTP_FROM_NAME=${SMTP_FROM_NAME}
SMTP_FROM_EMAIL=${SMTP_USER}

# Frontend URL for email links
FRONTEND_URL=${FRONTEND_URL}
EOF
                                            echo "‚úÖ Backend environment file created"
                                        '''
                                        
                                        // Build with environment variables
                                        sh 'npm run build'
                                        
                                        // Clean up temporary .env file
                                        sh 'rm -f .env.production'
                                    }
                                    
                                    // Verify build output exists
                                    if (!fileExists("${env.BACKEND_DIST}")) {
                                        error("‚ùå Backend build failed - ${env.BACKEND_DIST} directory not created")
                                    }
                                    if (!fileExists("${env.BACKEND_DIST}/server.js")) {
                                        error("‚ùå Backend build failed - server.js not found in ${env.BACKEND_DIST}")
                                    }
                                    echo "‚úÖ Backend build successful - artifacts in ${env.BACKEND_DIST}/"
                                }
                            } catch (Exception e) {
                                echo "‚ùå Backend build failed: ${e.getMessage()}"
                                sh "node scripts/failure-handler.js build_failure '${e.getMessage()}' 'Build Backend'"
                                throw e
                            }
                        }
                    }
                }
                stage('Build Frontend') {
                    steps {
                        echo 'üî® Building frontend...'
                        script {
                            try {
                                // Execute from farmtally-frontend directory
                                dir("${env.FRONTEND_ROOT}") {
                                    // Inject production environment variables
                                    withCredentials([
                                        string(credentialsId: 'farmtally-api-url', variable: 'NEXT_PUBLIC_API_URL'),
                                        string(credentialsId: 'farmtally-supabase-url', variable: 'NEXT_PUBLIC_SUPABASE_URL'),
                                        string(credentialsId: 'farmtally-supabase-anon-key', variable: 'NEXT_PUBLIC_SUPABASE_ANON_KEY')
                                    ]) {
                                        // Validate frontend environment variables
                                        echo 'üîç Validating frontend environment configuration...'
                                        sh 'node ../scripts/validate-frontend-environment.js validate'
                                        
                                        // Create production environment file using validation script
                                        sh 'node ../scripts/validate-frontend-environment.js create-env .'
                                        
                                        // Verify environment file was created
                                        if (!fileExists('.env.production')) {
                                            error('‚ùå Frontend environment file creation failed')
                                        }
                                        echo '‚úÖ Frontend environment file created and validated'
                                        
                                        // Build with validated environment variables
                                        echo 'üî® Building frontend with production configuration...'
                                        sh 'npm run build'
                                        
                                        // Verify API endpoint targeting in build output
                                        echo 'üîç Verifying API endpoint targeting in build...'
                                        sh 'node ../scripts/verify-frontend-api-targeting.js .'
                                        
                                        // Clean up temporary .env file
                                        sh 'rm -f .env.production'
                                    }
                                    
                                    // Verify build output exists and is valid
                                    def frontendBuildDir = ".next"
                                    if (!fileExists(frontendBuildDir)) {
                                        error("‚ùå Frontend build failed - ${frontendBuildDir} directory not created")
                                    }
                                    
                                    // Additional build validation
                                    if (!fileExists("${frontendBuildDir}/build-manifest.json")) {
                                        error("‚ùå Frontend build incomplete - build manifest missing")
                                    }
                                    
                                    echo "‚úÖ Frontend build successful - artifacts in ${frontendBuildDir}/"
                                    
                                    // Archive frontend validation reports
                                    if (fileExists('../frontend-env-validation-report.json')) {
                                        archiveArtifacts artifacts: '../frontend-env-validation-report.json', fingerprint: true
                                    }
                                    if (fileExists('../frontend-api-targeting-report.json')) {
                                        archiveArtifacts artifacts: '../frontend-api-targeting-report.json', fingerprint: true
                                    }
                                }
                            } catch (Exception e) {
                                echo "‚ùå Frontend build failed: ${e.getMessage()}"
                                sh "node scripts/failure-handler.js build_failure '${e.getMessage()}' 'Build Frontend'"
                                throw e
                            }
                        }
                    }
                }
            }
        }
        
        stage('Test') {
            steps {
                echo 'üß™ Running tests...'
                // Execute tests from backend root
                dir("${env.BACKEND_ROOT}") {
                    sh 'npm test || true'  // Don't fail build on test failure initially
                }
            }
        }
        
        stage('Database Migration') {
            steps {
                echo 'üóÑÔ∏è Executing database migrations...'
                withCredentials([
                    string(credentialsId: 'farmtally-database-url', variable: 'DATABASE_URL'),
                    string(credentialsId: 'farmtally-jwt-secret', variable: 'JWT_SECRET')
                ]) {
                    script {
                        try {
                            // Execute from backend root where Prisma schema is located
                            dir("${env.BACKEND_ROOT}") {
                                echo 'üîç Pre-migration: Checking database connectivity...'
                                
                                // Check database connectivity first
                                def connectivityCheck = sh(
                                    script: 'node scripts/migration-handler.js check-connectivity',
                                    returnStatus: true
                                )
                                
                                if (connectivityCheck != 0) {
                                    error('‚ùå Database connectivity check failed - aborting migration')
                                }
                                
                                echo '‚úÖ Database connectivity verified'
                                
                                // Get pre-migration status
                                echo 'üìä Getting pre-migration status...'
                                sh 'node scripts/migration-handler.js status > pre-migration-status.json || true'
                                
                                // Execute migrations with comprehensive error handling
                                echo 'üöÄ Executing database migrations...'
                                def migrationResult = sh(
                                    script: 'node scripts/migration-handler.js migrate',
                                    returnStatus: true
                                )
                                
                                if (migrationResult != 0) {
                                    echo '‚ùå Migration execution failed!'
                                    
                                    // Archive migration logs for debugging
                                    if (fileExists('migration.log')) {
                                        archiveArtifacts artifacts: 'migration.log', fingerprint: true
                                    }
                                    
                                    error('Database migration failed - deployment aborted to preserve previous version')
                                }
                                
                                echo '‚úÖ Database migrations completed successfully'
                                
                                // Verify migration completion
                                echo 'üîç Verifying migration completion...'
                                def verificationResult = sh(
                                    script: 'npx prisma migrate status | grep -q "Database schema is up to date"',
                                    returnStatus: true
                                )
                                
                                if (verificationResult != 0) {
                                    echo '‚ö†Ô∏è Migration status verification unclear, performing additional checks...'
                                    
                                    // Try Prisma client generation as additional verification
                                    def clientGenResult = sh(
                                        script: 'npx prisma generate',
                                        returnStatus: true
                                    )
                                    
                                    if (clientGenResult != 0) {
                                        error('‚ùå Migration verification failed - Prisma client generation unsuccessful')
                                    }
                                    
                                    echo '‚úÖ Migration verification passed via Prisma client generation'
                                } else {
                                    echo '‚úÖ Migration completion verified - database schema is up to date'
                                }
                                
                                // Archive migration artifacts
                                if (fileExists('migration.log')) {
                                    archiveArtifacts artifacts: 'migration.log', fingerprint: true
                                }
                                
                                // Archive migration reports
                                sh 'ls -la migration_report_*.json || true'
                                def migrationReports = sh(
                                    script: 'ls migration_report_*.json 2>/dev/null || echo "no-reports"',
                                    returnStdout: true
                                ).trim()
                                
                                if (migrationReports != 'no-reports') {
                                    archiveArtifacts artifacts: 'migration_report_*.json', fingerprint: true
                                    echo "üìä Migration reports archived: ${migrationReports}"
                                }
                            }
                        } catch (Exception e) {
                            echo "‚ùå Migration stage failed: ${e.getMessage()}"
                            
                            // Archive any available logs for debugging
                            dir("${env.BACKEND_ROOT}") {
                                if (fileExists('migration.log')) {
                                    archiveArtifacts artifacts: 'migration.log', fingerprint: true
                                }
                                if (fileExists('pre-migration-status.json')) {
                                    archiveArtifacts artifacts: 'pre-migration-status.json', fingerprint: true
                                }
                            }
                            
                            // Handle migration failure with comprehensive error handling
                            sh "node scripts/failure-handler.js migration_failure '${e.getMessage()}' 'Database Migration'"
                            
                            // Re-throw to fail the pipeline
                            throw e
                        }
                    }
                }
            }
        }
        
        stage('Create Build Artifact') {
            steps {
                echo 'üì¶ Creating versioned build artifact...'
                script {
                    try {
                        // Verify all required artifacts exist before packaging
                        echo 'üîç Verifying build artifacts...'
                        
                        // Backend artifacts
                        if (!fileExists("${env.BACKEND_DIST}")) {
                            error("‚ùå Backend artifacts missing - ${env.BACKEND_DIST} not found")
                        }
                        
                        // Frontend artifacts
                        dir("${env.FRONTEND_ROOT}") {
                            if (!fileExists('.next')) {
                                error('‚ùå Frontend artifacts missing - .next directory not found')
                            }
                        }
                        
                        echo '‚úÖ All build artifacts verified'
                        
                        // Load artifact management integration
                        def artifactManager = load 'scripts/jenkins-artifact-integration.groovy'
                        
                        // Create versioned artifact
                        echo 'üèóÔ∏è Creating versioned artifact package...'
                        def artifactInfo = artifactManager.createArtifact()
                        
                        // Store artifact information for deployment
                        env.ARTIFACT_NAME = artifactInfo.name
                        env.ARTIFACT_VERSION = artifactInfo.version
                        env.ARTIFACT_COMMIT = artifactInfo.commit
                        env.ARTIFACT_PATH = artifactInfo.path
                        
                        echo "‚úÖ Artifact created successfully: ${env.ARTIFACT_NAME}"
                        echo "üìç Artifact location: ${env.ARTIFACT_PATH}"
                        
                        // Verify artifact integrity
                        echo 'üîç Verifying artifact integrity...'
                        if (!artifactManager.verifyArtifact(env.ARTIFACT_NAME)) {
                            error('‚ùå Artifact integrity verification failed')
                        }
                        
                        echo '‚úÖ Artifact integrity verified'
                        
                        // Clean old artifacts (retention policy)
                        echo 'üßπ Applying artifact retention policy...'
                        artifactManager.cleanOldArtifacts()
                        
                        // Create deployment manifest with artifact information
                        def manifest = [
                            timestamp: new Date().format("yyyy-MM-dd'T'HH:mm:ss'Z'"),
                            buildNumber: env.BUILD_NUMBER,
                            gitCommit: env.GIT_COMMIT,
                            artifact: [
                                name: env.ARTIFACT_NAME,
                                version: env.ARTIFACT_VERSION,
                                commit: env.ARTIFACT_COMMIT,
                                path: env.ARTIFACT_PATH
                            ],
                            migrationCompleted: true,
                            backend: [
                                root: env.BACKEND_ROOT,
                                dist: env.BACKEND_DIST
                            ],
                            frontend: [
                                root: env.FRONTEND_ROOT,
                                dist: env.FRONTEND_DIST
                            ]
                        ]
                        
                        writeJSON file: 'deployment-manifest.json', json: manifest
                        archiveArtifacts artifacts: 'deployment-manifest.json', fingerprint: true
                        
                        echo 'üìù Deployment manifest created with artifact information'
                        
                    } catch (Exception e) {
                        echo "‚ùå Artifact creation failed: ${e.getMessage()}"
                        sh "node scripts/failure-handler.js artifact_creation '${e.getMessage()}' 'Create Build Artifact'"
                        throw e
                    }
                }
            }
        }
        
        stage('Deploy Artifact to VPS') {
            steps {
                echo 'üöÄ Deploying artifact to VPS...'
                sshagent(['vps-ssh-key']) {
                    withCredentials([
                        string(credentialsId: 'farmtally-database-url', variable: 'DATABASE_URL'),
                        string(credentialsId: 'farmtally-jwt-secret', variable: 'JWT_SECRET'),
                        string(credentialsId: 'farmtally-cors-origins', variable: 'CORS_ORIGINS'),
                        string(credentialsId: 'farmtally-smtp-host', variable: 'SMTP_HOST'),
                        string(credentialsId: 'farmtally-smtp-user', variable: 'SMTP_USER'),
                        string(credentialsId: 'farmtally-smtp-password', variable: 'SMTP_PASS'),
                        string(credentialsId: 'farmtally-frontend-url', variable: 'FRONTEND_URL')
                    ]) {
                        script {
                            try {
                                echo "üöÄ Deploying artifact: ${env.ARTIFACT_NAME}"
                                echo "üìç Target: ${VPS_USER}@${VPS_HOST}:${APP_DIR}"
                                
                                // Load artifact management integration
                                def artifactManager = load 'scripts/jenkins-artifact-integration.groovy'
                                
                                // Create production environment file on VPS first
                                echo 'üìù Creating production environment configuration...'
                                sh """
                                    ssh -o StrictHostKeyChecking=no ${VPS_USER}@${VPS_HOST} '
                                        mkdir -p ${APP_DIR}
                                        mkdir -p ${APP_DIR}/logs
                                        
                                        cat > ${APP_DIR}/.env << EOF
# Environment
NODE_ENV=production
PORT=${PORT}

# Database
DATABASE_URL=${DATABASE_URL}

# JWT
JWT_SECRET=${JWT_SECRET}
JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
JWT_REFRESH_EXPIRES_IN=${JWT_REFRESH_EXPIRES_IN}

# CORS
CORS_ORIGINS=${CORS_ORIGINS}

# Security
BCRYPT_SALT_ROUNDS=${BCRYPT_SALT_ROUNDS}

# File Upload
MAX_FILE_SIZE=${MAX_FILE_SIZE}
ALLOWED_FILE_TYPES=${ALLOWED_FILE_TYPES}

# Rate Limiting
RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS}
RATE_LIMIT_MAX=${RATE_LIMIT_MAX}

# Email Configuration
EMAIL_NOTIFICATIONS_ENABLED=${EMAIL_NOTIFICATIONS_ENABLED}
SMTP_HOST=${SMTP_HOST}
SMTP_PORT=${SMTP_PORT}
SMTP_SECURE=${SMTP_SECURE}
SMTP_USER=${SMTP_USER}
SMTP_PASS=${SMTP_PASS}
SMTP_FROM_NAME=${SMTP_FROM_NAME}
SMTP_FROM_EMAIL=${SMTP_USER}

# Frontend URL for email links
FRONTEND_URL=${FRONTEND_URL}
EOF
                                        echo "‚úÖ Production environment file created on VPS"
                                    '
                                """
                                
                                // Deploy the artifact using the artifact deployment system
                                echo 'üì¶ Deploying artifact components...'
                                artifactManager.deployArtifact(
                                    env.ARTIFACT_NAME,
                                    "${VPS_USER}@${VPS_HOST}",
                                    APP_DIR
                                )
                                
                                echo "‚úÖ Artifact deployment completed successfully"
                                
                                // Log deployment details
                                def deploymentDetails = [
                                    timestamp: new Date().format("yyyy-MM-dd'T'HH:mm:ss'Z'"),
                                    artifact: env.ARTIFACT_NAME,
                                    version: env.ARTIFACT_VERSION,
                                    commit: env.ARTIFACT_COMMIT,
                                    target: "${VPS_USER}@${VPS_HOST}:${APP_DIR}",
                                    buildNumber: env.BUILD_NUMBER,
                                    buildUrl: env.BUILD_URL
                                ]
                                
                                writeJSON file: 'deployment-details.json', json: deploymentDetails
                                archiveArtifacts artifacts: 'deployment-details.json', fingerprint: true
                                
                            } catch (Exception e) {
                                echo "‚ùå Artifact deployment failed: ${e.getMessage()}"
                                
                                // Attempt automatic rollback on deployment failure
                                echo "üîÑ Attempting automatic rollback..."
                                try {
                                    def artifactManager = load 'scripts/jenkins-artifact-integration.groovy'
                                    artifactManager.rollbackToPreviousArtifact(
                                        "${VPS_USER}@${VPS_HOST}",
                                        APP_DIR
                                    )
                                    echo "‚úÖ Automatic rollback completed"
                                } catch (Exception rollbackError) {
                                    echo "‚ùå Automatic rollback failed: ${rollbackError.getMessage()}"
                                    echo "üö® CRITICAL: Manual intervention required!"
                                }
                                
                                sh "node scripts/failure-handler.js deployment_failure '${e.getMessage()}' 'Deploy Artifact to VPS'"
                                throw e
                            }
                        }
                    }
                }
            }
        }
                            
                            // Create backup of current deployment before updating
                            echo 'üíæ Creating backup of current deployment...'
                            sh """
                                ssh -o StrictHostKeyChecking=no ${VPS_USER}@${VPS_HOST} '
                                    # Create backup directory structure
                                    mkdir -p ${APP_DIR}/backups/build-${BUILD_NUMBER}
                                    
                                    # Backup current deployment if it exists
                                    if [ -d "${APP_DIR}/backend" ]; then
                                        echo "Backing up current backend..."
                                        tar -czf ${APP_DIR}/backups/build-${BUILD_NUMBER}/previous-backend.tar.gz -C ${APP_DIR} backend/ || true
                                    fi
                                    
                                    if [ -d "${APP_DIR}/frontend" ]; then
                                        echo "Backing up current frontend..."
                                        tar -czf ${APP_DIR}/backups/build-${BUILD_NUMBER}/previous-frontend.tar.gz -C ${APP_DIR} frontend/ || true
                                    fi
                                    
                                    echo "Current deployment backup completed"
                                '
                            """
                            
                            // Deploy backend artifacts from correct path
                            echo 'üì§ Uploading backend artifacts...'
                            sh """
                                scp -r ${env.BACKEND_DIST}/* ${VPS_USER}@${VPS_HOST}:${APP_DIR}/backend/
                                scp package.json ${VPS_USER}@${VPS_HOST}:${APP_DIR}/backend/
                                scp package-lock.json ${VPS_USER}@${VPS_HOST}:${APP_DIR}/backend/
                            """
                            
                            // Deploy frontend artifacts from correct path
                            echo 'üì§ Uploading frontend artifacts...'
                            sh """
                                ssh -o StrictHostKeyChecking=no ${VPS_USER}@${VPS_HOST} 'mkdir -p ${APP_DIR}/frontend'
                                scp -r ${env.FRONTEND_ROOT}/.next/* ${VPS_USER}@${VPS_HOST}:${APP_DIR}/frontend/
                            """
                            
                            // Create deployment artifact backup for rollback
                            echo 'üì¶ Creating deployment artifact backup for rollback...'
                            sh """
                                ssh -o StrictHostKeyChecking=no ${VPS_USER}@${VPS_HOST} '
                                    # Create new deployment backup
                                    echo "Creating backup of new deployment..."
                                    tar -czf ${APP_DIR}/backups/build-${BUILD_NUMBER}/backend.tar.gz -C ${APP_DIR} backend/
                                    tar -czf ${APP_DIR}/backups/build-${BUILD_NUMBER}/frontend.tar.gz -C ${APP_DIR} frontend/
                                    
                                    # Create deployment manifest for rollback
                                    cat > ${APP_DIR}/backups/build-${BUILD_NUMBER}/manifest.json << EOF
{
    \"build_number\": \"${BUILD_NUMBER}\",
    \"git_commit\": \"${GIT_COMMIT}\",
    \"git_branch\": \"${GIT_BRANCH}\",
    \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
    \"components\": {
        \"backend\": \"backend.tar.gz\",
        \"frontend\": \"frontend.tar.gz\"
    },
    \"migration_completed\": true,
    \"deployment_type\": \"full\"
}
EOF
                                    
                                    echo "Deployment backup manifest created"
                                    
                                    # Cleanup old backups (keep last 10)
                                    cd ${APP_DIR}/backups
                                    ls -t | grep "^build-" | tail -n +11 | xargs -r rm -rf
                                    
                                    echo "Backup cleanup completed"
                                '
                            """
                            
                            // Install production dependencies and restart
                            echo 'üîÑ Installing dependencies and restarting services...'
                            sh """
                                ssh -o StrictHostKeyChecking=no ${VPS_USER}@${VPS_HOST} '
                                    cd ${APP_DIR}/backend
                                    npm ci --only=production
                                    
                                    # Verify migration completion before app restart
                                    echo "üîç Final migration verification before app restart..."
                                    if ! npx prisma migrate status | grep -q "Database schema is up to date"; then
                                        echo "‚ùå Migration verification failed - database may not be ready"
                                        exit 1
                                    fi
                                    echo "‚úÖ Migration verification passed - proceeding with app restart"
                                    
                                    # Stop existing PM2 processes gracefully
                                    echo "üõë Stopping existing backend processes..."
                                    pm2 stop farmtally-backend || true
                                    pm2 delete farmtally-backend || true
                                    
                                    # Wait a moment for graceful shutdown
                                    sleep 2
                                    
                                    # Start new process with environment file
                                    echo "üöÄ Starting new backend process..."
                                    pm2 start server.js --name farmtally-backend
                                    pm2 save
                                    
                                    # Wait for process to initialize
                                    sleep 5
                                    
                                    # Show status
                                    pm2 status
                                    
                                    # Verify the process is running
                                    if ! pm2 list | grep -q "farmtally-backend.*online"; then
                                        echo "‚ùå Backend process failed to start properly"
                                        pm2 logs farmtally-backend --lines 20
                                        exit 1
                                    fi
                                    
                                    echo "‚úÖ Backend deployment completed successfully"
                                '
                            """
                        }
                    }
                }
            }
        }
        
        stage('Health Verification') {
            steps {
                echo 'üè• Performing comprehensive health verification...'
                withCredentials([
                    string(credentialsId: 'farmtally-jwt-secret', variable: 'JWT_SECRET')
                ]) {
                    script {
                        try {
                            // Wait for service to fully initialize
                            echo '‚è≥ Waiting for service initialization...'
                            sleep(15)
                            
                            // Set health check configuration
                            def apiUrl = "http://${VPS_HOST}:${PORT}"
                            def healthCheckTimeout = 30000 // 30 seconds
                            def healthCheckRetries = 5
                            
                            echo "üîç Starting comprehensive health checks for: ${apiUrl}"
                            
                            // Execute comprehensive health check script
                            def healthCheckResult = sh(
                                script: """
                                    export API_URL="${apiUrl}"
                                    export JWT_SECRET="${JWT_SECRET}"
                                    export TIMEOUT="${healthCheckTimeout}"
                                    export RETRIES="${healthCheckRetries}"
                                    export VERBOSE="true"
                                    export JSON_OUTPUT="true"
                                    
                                    # Run comprehensive health check
                                    node scripts/health-check.js --verbose --json > health-check-results.json
                                """,
                                returnStatus: true
                            )
                            
                            // Archive health check results
                            if (fileExists('health-check-results.json')) {
                                archiveArtifacts artifacts: 'health-check-results.json', fingerprint: true
                                
                                // Parse and display results
                                def healthResults = readJSON file: 'health-check-results.json'
                                
                                echo "üìä Health Check Summary:"
                                echo "   Total Checks: ${healthResults.summary.total}"
                                echo "   Passed: ${healthResults.summary.passed}"
                                echo "   Failed: ${healthResults.summary.failed}"
                                echo "   Duration: ${healthResults.summary.duration}ms"
                                echo "   Success Rate: ${((healthResults.summary.passed / healthResults.summary.total) * 100).round(1)}%"
                                
                                // Log individual check results
                                healthResults.checks.each { check ->
                                    def status = check.status == 'PASSED' ? '‚úÖ' : check.status == 'FAILED' ? '‚ùå' : '‚ö†Ô∏è'
                                    echo "   ${status} ${check.name}: ${check.status} (${check.duration}ms)"
                                    if (check.error) {
                                        echo "      Error: ${check.error}"
                                    }
                                }
                            }
                            
                            if (healthCheckResult != 0) {
                                echo '‚ùå Comprehensive health check failed!'
                                
                                // Get PM2 logs for debugging
                                sh """
                                    ssh -o StrictHostKeyChecking=no ${VPS_USER}@${VPS_HOST} '
                                        echo "üìã PM2 Process Status:"
                                        pm2 status || true
                                        echo ""
                                        echo "üìã Recent Backend Logs:"
                                        pm2 logs farmtally-backend --lines 50 || true
                                    '
                                """
                                
                                // Trigger rollback on health check failure
                                echo 'üîÑ Health check failed - initiating automatic rollback...'
                                
                                def rollbackResult = sh(
                                    script: """
                                        ssh -o StrictHostKeyChecking=no ${VPS_USER}@${VPS_HOST} '
                                            cd ${APP_DIR}/backups
                                            
                                            # Find previous successful deployment
                                            PREVIOUS_BUILD=\$(ls -t | grep "^build-" | grep -v "build-${BUILD_NUMBER}" | head -1)
                                            
                                            if [ -n "\$PREVIOUS_BUILD" ] && [ -f "\$PREVIOUS_BUILD/manifest.json" ]; then
                                                echo "üîÑ Rolling back to: \$PREVIOUS_BUILD"
                                                
                                                # Stop current process
                                                pm2 stop farmtally-backend || true
                                                pm2 delete farmtally-backend || true
                                                
                                                # Restore previous backend
                                                cd ${APP_DIR}
                                                rm -rf backend_failed
                                                mv backend backend_failed
                                                tar -xzf backups/\$PREVIOUS_BUILD/previous-backend.tar.gz
                                                
                                                # Restart with previous version
                                                cd backend
                                                pm2 start server.js --name farmtally-backend
                                                pm2 save
                                                
                                                echo "‚úÖ Rollback completed to: \$PREVIOUS_BUILD"
                                            else
                                                echo "‚ùå No previous deployment found for rollback"
                                                exit 1
                                            fi
                                        '
                                    """,
                                    returnStatus: true
                                )
                                
                                if (rollbackResult == 0) {
                                    echo '‚úÖ Automatic rollback completed successfully'
                                    
                                    // Verify rollback health
                                    sleep(10)
                                    def rollbackHealthCheck = sh(
                                        script: "curl -f ${apiUrl}/api/health",
                                        returnStatus: true
                                    )
                                    
                                    if (rollbackHealthCheck == 0) {
                                        echo '‚úÖ Rollback health check passed - previous version restored'
                                    } else {
                                        echo '‚ùå Rollback health check failed - manual intervention required'
                                    }
                                } else {
                                    echo '‚ùå Automatic rollback failed - manual intervention required'
                                }
                                
                                error('Deployment failed health verification and rollback was attempted')
                            } else {
                                echo '‚úÖ All health checks passed successfully!'
                                
                                // Additional verification - test a few key endpoints
                                echo 'üîç Performing additional endpoint verification...'
                                
                                def endpointTests = [
                                    "${apiUrl}/": "Root endpoint",
                                    "${apiUrl}/api/health": "Health endpoint"
                                ]
                                
                                endpointTests.each { url, description ->
                                    def testResult = sh(
                                        script: "curl -f -s -o /dev/null -w '%{http_code}' '${url}'",
                                        returnStdout: true
                                    ).trim()
                                    
                                    if (testResult == '200') {
                                        echo "   ‚úÖ ${description}: HTTP ${testResult}"
                                    } else {
                                        echo "   ‚ö†Ô∏è ${description}: HTTP ${testResult}"
                                    }
                                }
                                
                                echo 'üéâ Deployment health verification completed successfully!'
                            }
                            
                        } catch (Exception e) {
                            echo "‚ùå Health verification stage failed: ${e.getMessage()}"
                            
                            // Archive any available health check logs
                            if (fileExists('health-check-results.json')) {
                                archiveArtifacts artifacts: 'health-check-results.json', fingerprint: true
                            }
                            
                            // Get system status for debugging
                            sh """
                                ssh -o StrictHostKeyChecking=no ${VPS_USER}@${VPS_HOST} '
                                    echo "üìã System Status for Debugging:"
                                    echo "PM2 Status:"
                                    pm2 status || true
                                    echo ""
                                    echo "Process List:"
                                    ps aux | grep node || true
                                    echo ""
                                    echo "Port Usage:"
                                    netstat -tlnp | grep :${PORT} || true
                                    echo ""
                                    echo "Recent Logs:"
                                    pm2 logs farmtally-backend --lines 30 || true
                                ' > system-debug.log 2>&1
                            """
                            
                            if (fileExists('system-debug.log')) {
                                archiveArtifacts artifacts: 'system-debug.log', fingerprint: true
                            }
                            
                            // Re-throw to fail the pipeline
                            throw e
                        }
                    }
                }
            }
        }
        
        stage('Frontend API Verification') {
            steps {
                echo 'üåê Verifying frontend API endpoint targeting...'
                script {
                    try {
                        // Generate browser validation package
                        echo 'üì¶ Generating browser validation package...'
                        withCredentials([
                            string(credentialsId: 'farmtally-api-url', variable: 'NEXT_PUBLIC_API_URL'),
                            string(credentialsId: 'farmtally-supabase-url', variable: 'NEXT_PUBLIC_SUPABASE_URL')
                        ]) {
                            sh 'node scripts/validate-browser-network-logs.js'
                        }
                        
                        // Verify frontend build contains correct API URLs
                        echo 'üîç Verifying API URLs in frontend build artifacts...'
                        dir("${env.FRONTEND_ROOT}") {
                            withCredentials([
                                string(credentialsId: 'farmtally-api-url', variable: 'NEXT_PUBLIC_API_URL')
                            ]) {
                                // Run post-build API targeting verification
                                sh 'node ../scripts/verify-frontend-api-targeting.js .'
                            }
                        }
                        
                        // Create production readiness checklist
                        echo 'üìã Creating production readiness checklist...'
                        withCredentials([
                            string(credentialsId: 'farmtally-api-url', variable: 'NEXT_PUBLIC_API_URL')
                        ]) {
                            sh '''
                                cat > frontend-production-checklist.md << EOF
# Frontend Production Readiness Checklist

## Build Verification ‚úÖ
- [x] Frontend build completed successfully
- [x] Environment variables properly injected
- [x] API URLs embedded in build artifacts
- [x] No development URLs in production build

## API Configuration ‚úÖ
- [x] NEXT_PUBLIC_API_URL points to production backend
- [x] NEXT_PUBLIC_SOCKET_URL configured correctly
- [x] Supabase configuration validated
- [x] Build-time validation passed

## Manual Verification Required
- [ ] Browser network logs show correct API calls
- [ ] No CORS errors in browser console
- [ ] Authentication flows work correctly
- [ ] Real-time features function properly
- [ ] All pages load without API errors

## Browser Testing Instructions
1. Open FarmTally application in browser
2. Open Developer Tools (F12) ‚Üí Network tab
3. Reload page and perform user actions
4. Verify all API calls go to: ${NEXT_PUBLIC_API_URL}
5. Check for any localhost or development URLs
6. Test authentication and data loading

## Validation Package
Browser validation tools available in: browser-validation-package/
- Use automated-network-validator.js in browser console
- Follow validation-instructions.json for manual testing
- Analyze HAR files with har-analysis-script.js

Generated: $(date)
Build: #${BUILD_NUMBER}
EOF
                            '''
                        }
                        
                        echo '‚úÖ Frontend API verification completed successfully!'
                        
                        // Archive validation artifacts
                        if (fileExists('browser-validation-package')) {
                            sh 'tar -czf browser-validation-package.tar.gz browser-validation-package/'
                            archiveArtifacts artifacts: 'browser-validation-package.tar.gz', fingerprint: true
                        }
                        
                        if (fileExists('frontend-production-checklist.md')) {
                            archiveArtifacts artifacts: 'frontend-production-checklist.md', fingerprint: true
                        }
                        
                    } catch (Exception e) {
                        echo "‚ùå Frontend API verification failed: ${e.getMessage()}"
                        
                        // Archive any available verification reports
                        if (fileExists('frontend-api-targeting-report.json')) {
                            archiveArtifacts artifacts: 'frontend-api-targeting-report.json', fingerprint: true
                        }
                        
                        // This is a warning, not a failure - deployment can continue
                        echo '‚ö†Ô∏è Frontend API verification had issues but deployment will continue'
                        echo 'üí° Manual verification recommended using browser validation package'
                    }
                }
            }
        }
    }
    
    post {
        success {
            echo '‚úÖ Deployment successful!'
            script {
                // Archive deployment manifest and validation reports
                archiveArtifacts artifacts: 'deployment-manifest.json', fingerprint: true
                archiveArtifacts artifacts: 'workspace-paths.env', fingerprint: true
                
                // Archive validation reports if they exist
                if (fileExists('credential-validation-report.json')) {
                    archiveArtifacts artifacts: 'credential-validation-report.json', fingerprint: true
                }
                if (fileExists('environment-validation-report.json')) {
                    archiveArtifacts artifacts: 'environment-validation-report.json', fingerprint: true
                }
                if (fileExists('backend-connectivity-report.json')) {
                    archiveArtifacts artifacts: 'backend-connectivity-report.json', fingerprint: true
                }
                
                // Archive health check results
                if (fileExists('health-check-results.json')) {
                    archiveArtifacts artifacts: 'health-check-results.json', fingerprint: true
                }
                
                // Prepare health check summary for email
                def healthSummary = "Health checks not available"
                if (fileExists('health-check-results.json')) {
                    try {
                        def healthResults = readJSON file: 'health-check-results.json'
                        def successRate = ((healthResults.summary.passed / healthResults.summary.total) * 100).round(1)
                        healthSummary = """
                            <p><strong>Health Check Results:</strong></p>
                            <ul>
                                <li>Total Checks: ${healthResults.summary.total}</li>
                                <li>Passed: ${healthResults.summary.passed}</li>
                                <li>Failed: ${healthResults.summary.failed}</li>
                                <li>Success Rate: ${successRate}%</li>
                                <li>Duration: ${healthResults.summary.duration}ms</li>
                            </ul>
                        """
                    } catch (Exception e) {
                        healthSummary = "<p><strong>Health Check Results:</strong> Error reading results</p>"
                    }
                } else {
                    healthSummary = "<p><strong>Health Check Results:</strong> No health check data available</p>"
                }
                
                env.HEALTH_SUMMARY = healthSummary
            }
            emailext (
                subject: "‚úÖ FarmTally Deployment Successful - Build #${BUILD_NUMBER}",
                body: """
                    <h2>üéâ FarmTally Deployment Successful!</h2>
                    <p><strong>Build:</strong> #${BUILD_NUMBER}</p>
                    <p><strong>Branch:</strong> ${GIT_BRANCH}</p>
                    <p><strong>Commit:</strong> ${GIT_COMMIT}</p>
                    <p><strong>Backend Path:</strong> ${BACKEND_ROOT}</p>
                    <p><strong>Frontend Path:</strong> ${FRONTEND_ROOT}</p>
                    <p><strong>URL:</strong> <a href="http://147.93.153.247:${PORT}">http://147.93.153.247:${PORT}</a></p>
                    ${env.HEALTH_SUMMARY}
                    <p><strong>Jenkins:</strong> <a href="${BUILD_URL}">${BUILD_URL}</a></p>
                """,
                to: "admin@farmtally.in",
                mimeType: 'text/html'
            )
        }
        
        failure {
            echo '‚ùå Deployment failed!'
            script {
                // Prepare failure details including health check info
                def failureDetails = "Check the build logs for details"
                def healthInfo = ""
                
                if (fileExists('health-check-results.json')) {
                    try {
                        def healthResults = readJSON file: 'health-check-results.json'
                        def failedChecks = healthResults.checks.findAll { it.status == 'FAILED' }
                        
                        if (failedChecks.size() > 0) {
                            failureDetails = "Health verification failed"
                            healthInfo = """
                                <p><strong>Failed Health Checks:</strong></p>
                                <ul>
                                    ${failedChecks.collect { "<li>${it.name}: ${it.error ?: 'Unknown error'}</li>" }.join('')}
                                </ul>
                                <p><strong>Health Check Summary:</strong> ${healthResults.summary.passed}/${healthResults.summary.total} passed</p>
                            """
                        }
                    } catch (Exception e) {
                        healthInfo = "<p><strong>Health Check:</strong> Error reading health check results</p>"
                    }
                }
                
                env.FAILURE_DETAILS = failureDetails
                env.HEALTH_INFO = healthInfo
            }
            emailext (
                subject: "‚ùå FarmTally Deployment Failed - Build #${BUILD_NUMBER}",
                body: """
                    <h2>üí• FarmTally Deployment Failed!</h2>
                    <p><strong>Build:</strong> #${BUILD_NUMBER}</p>
                    <p><strong>Branch:</strong> ${GIT_BRANCH}</p>
                    <p><strong>Failed Stage:</strong> ${env.FAILURE_DETAILS}</p>
                    <p><strong>Backend Path:</strong> ${BACKEND_ROOT}</p>
                    <p><strong>Frontend Path:</strong> ${FRONTEND_ROOT}</p>
                    ${env.HEALTH_INFO}
                    <p><strong>Jenkins:</strong> <a href="${BUILD_URL}">${BUILD_URL}</a></p>
                    <p><strong>Action Required:</strong> Check Jenkins logs and health check results for detailed error information.</p>
                """,
                to: "admin@farmtally.in",
                mimeType: 'text/html'
            )
        }
        
        always {
            echo 'üßπ Cleaning up workspace...'
            // Archive all validation and health check results
            script {
                def artifactsToArchive = [
                    'workspace-paths.env',
                    'credential-validation-report.json',
                    'environment-validation-report.json',
                    'backend-connectivity-report.json',
                    'health-check-results.json',
                    'system-debug.log'
                ]
                
                artifactsToArchive.each { artifact ->
                    if (fileExists(artifact)) {
                        archiveArtifacts artifacts: artifact, fingerprint: true
                        echo "üìÅ Archived: ${artifact}"
                    }
                }
                
                // Log final pipeline summary
                echo """
                üìä Pipeline Execution Summary:
                   Build Number: ${BUILD_NUMBER}
                   Git Commit: ${GIT_COMMIT}
                   Backend Path: ${BACKEND_ROOT}
                   Frontend Path: ${FRONTEND_ROOT}
                   Health Checks: ${fileExists('health-check-results.json') ? 'Available' : 'Not Available'}
                """
            }
            cleanWs()
        }
    }
    
    post {
        always {
            echo 'üìä Pipeline execution completed'
            
            // Archive failure reports if they exist
            script {
                if (fileExists('failure-reports/')) {
                    archiveArtifacts artifacts: 'failure-reports/*.json', fingerprint: true, allowEmptyArchive: true
                }
                if (fileExists('pipeline-failure.log')) {
                    archiveArtifacts artifacts: 'pipeline-failure.log', fingerprint: true
                }
            }
        }
        
        success {
            echo '‚úÖ Pipeline completed successfully'
            
            // Send success notification
            script {
                def successMessage = """
üéâ FarmTally Deployment Successful

Build Number: ${env.BUILD_NUMBER}
Git Commit: ${env.GIT_COMMIT}
Branch: ${env.GIT_BRANCH}
Duration: ${currentBuild.durationString}

All stages completed successfully:
‚úÖ Workspace validation
‚úÖ Credential validation  
‚úÖ Environment validation
‚úÖ Backend build
‚úÖ Frontend build
‚úÖ Database migration
‚úÖ Deployment
‚úÖ Health checks

Jenkins Build: ${env.BUILD_URL}
                """
                
                echo successMessage
                
                // Send email notification if configured
                if (env.SUCCESS_EMAIL_RECIPIENTS) {
                    emailext (
                        subject: "‚úÖ FarmTally Deployment Success - Build ${env.BUILD_NUMBER}",
                        body: successMessage,
                        to: env.SUCCESS_EMAIL_RECIPIENTS
                    )
                }
            }
        }
        
        failure {
            echo '‚ùå Pipeline failed'
            
            // Handle pipeline failure with comprehensive error reporting
            script {
                def failureStage = env.STAGE_NAME ?: 'Unknown'
                def failureMessage = "Pipeline failed at stage: ${failureStage}"
                
                try {
                    sh "node scripts/failure-handler.js deployment_failure '${failureMessage}' '${failureStage}'"
                } catch (Exception e) {
                    echo "‚ö†Ô∏è Failed to execute failure handler: ${e.getMessage()}"
                }
                
                // Send failure notification
                def failureNotification = """
üö® FarmTally Pipeline Failure

Build Number: ${env.BUILD_NUMBER}
Git Commit: ${env.GIT_COMMIT}
Branch: ${env.GIT_BRANCH}
Failed Stage: ${failureStage}
Duration: ${currentBuild.durationString}

Please check the Jenkins logs for detailed error information.

Jenkins Build: ${env.BUILD_URL}
Console Output: ${env.BUILD_URL}console

The previous deployment remains active to ensure service continuity.
                """
                
                echo failureNotification
                
                // Send email notification if configured
                if (env.FAILURE_EMAIL_RECIPIENTS) {
                    emailext (
                        subject: "üö® FarmTally Pipeline Failure - Build ${env.BUILD_NUMBER}",
                        body: failureNotification,
                        to: env.FAILURE_EMAIL_RECIPIENTS
                    )
                }
            }
        }
        
        unstable {
            echo '‚ö†Ô∏è Pipeline completed with warnings'
            
            script {
                def warningMessage = """
‚ö†Ô∏è FarmTally Pipeline Completed with Warnings

Build Number: ${env.BUILD_NUMBER}
Git Commit: ${env.GIT_COMMIT}
Branch: ${env.GIT_BRANCH}
Duration: ${currentBuild.durationString}

The deployment completed but some non-critical issues were detected.
Please review the build logs for details.

Jenkins Build: ${env.BUILD_URL}
                """
                
                echo warningMessage
                
                // Send warning notification if configured
                if (env.WARNING_EMAIL_RECIPIENTS) {
                    emailext (
                        subject: "‚ö†Ô∏è FarmTally Pipeline Warning - Build ${env.BUILD_NUMBER}",
                        body: warningMessage,
                        to: env.WARNING_EMAIL_RECIPIENTS
                    )
                }
            }
        }
        
        aborted {
            echo 'üõë Pipeline was aborted'
            
            script {
                def abortMessage = """
üõë FarmTally Pipeline Aborted

Build Number: ${env.BUILD_NUMBER}
Git Commit: ${env.GIT_COMMIT}
Branch: ${env.GIT_BRANCH}
Duration: ${currentBuild.durationString}

The pipeline was manually aborted or cancelled.
The previous deployment remains active.

Jenkins Build: ${env.BUILD_URL}
                """
                
                echo abortMessage
                
                // Send abort notification if configured
                if (env.FAILURE_EMAIL_RECIPIENTS) {
                    emailext (
                        subject: "üõë FarmTally Pipeline Aborted - Build ${env.BUILD_NUMBER}",
                        body: abortMessage,
                        to: env.FAILURE_EMAIL_RECIPIENTS
                    )
                }
            }
        }
    }
}